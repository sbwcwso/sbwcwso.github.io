(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{912:function(e,l,t){"use strict";t.r(l);var a=t(12),o=Object(a.a)({},(function(){var e=this,l=e.$createElement,t=e._self._c||l;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"malloc-lab"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#malloc-lab"}},[e._v("#")]),e._v(" Malloc lab")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("ul",[t("li",[e._v("Macros / Inline Functions")]),e._v(" "),t("li",[e._v("Heap checker\n"),t("ul",[t("li",[t("code",[e._v("__line__")])]),e._v(" "),t("li",[e._v("Heap checker can help you debug")]),e._v(" "),t("li",[e._v("Define macros to enable/disable it conveniently")]),e._v(" "),t("li",[e._v("Some examples of what a heap checker might check are:\n• Is every block in the free list marked as free?"),t("br"),e._v("\n• Are there any contiguous free blocks that somehow escaped coalescing?"),t("br"),e._v("\n• Is every free block actually in the free list?"),t("br"),e._v("\n• Do the pointers in the free list point to valid free blocks?"),t("br"),e._v("\n• Do any allocated blocks overlap?"),t("br"),e._v("\n• Do the pointers in a heap block point to valid heap addresses?")])])]),e._v(" "),t("li",[e._v("profile\n"),t("ul",[t("li",[e._v("Makefile")]),e._v(" "),t("li",[e._v("Don't forget to change the Makefile back\n"),t("ul",[t("li",[t("code",[e._v("-pg")])])])]),e._v(" "),t("li",[t("code",[e._v("gprof")])])])]),e._v(" "),t("li",[e._v("valgrind")])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("ul",[t("li",[e._v("程序最终以 "),t("code",[e._v("-m32")]),e._v(" 进行编译，指针占据 4 个字节")])])]),e._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[e._v("显式空间链表")]),e._v(" "),t("ul",[t("li",[e._v("当前找不到合适的空间链表时，再进行合并处理")])])])])}),[],!1,null,null,null);l.default=o.exports}}]);