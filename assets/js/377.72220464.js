(window.webpackJsonp=window.webpackJsonp||[]).push([[377],{1063:function(e,t,o){"use strict";o.r(t);var i=o(12),v=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"145-file-system工作示例"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#145-file-system工作示例"}},[e._v("#")]),e._v(" 14.5 File system工作示例")]),e._v(" "),o("p",[e._v("接下来我们看一下实际中，XV6的文件系统是如何工作的，这部分内容对于下一个lab是有帮助的。")]),e._v(" "),o("p",[e._v("首先我会启动XV6，这里有件事情我想指出。启动XV6的过程中，调用了makefs指令，来创建一个文件系统。")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/image%20%28605%29.png",alt:""}})]),e._v(" "),o("p",[e._v("所以makefs创建了一个全新的磁盘镜像，在这个磁盘镜像中包含了我们在指令中传入的一些文件。makefs为你创建了一个包含这些文件的新的文件系统。")]),e._v(" "),o("p",[e._v("XV6总是会打印文件系统的一些信息，所以从指令的下方可以看出有46个meta block，其中包括了：")]),e._v(" "),o("ul",[o("li",[e._v("boot block")]),e._v(" "),o("li",[e._v("super block")]),e._v(" "),o("li",[e._v("30个log block")]),e._v(" "),o("li",[e._v("13个inode block")]),e._v(" "),o("li",[e._v("1个bitmap block")])]),e._v(" "),o("p",[e._v("之后是954个data block。所以这是一个袖珍级的文件系统，总共就包含了1000个block。在File system lab中，你们会去支持更大的文件系统。")]),e._v(" "),o("p",[e._v("我还稍微修改了一下XV6，使得任何时候写入block都会打印出block的编号。我们从console的输出可以看出，在XV6启动过程中，会有一些对于文件系统的调用，并写入了block 33，45，32。")]),e._v(" "),o("p",[e._v("接下来我们运行一些命令，来看一下特定的命令对哪些block做了写操作，并理解为什么要对这些block写入数据。我们通过echo “hi” > x，来创建一个文件x，并写入字符“hi”。我会将输出拷贝出来，并做分隔以方便我们更好的理解。")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/image%20%28596%29.png",alt:""}})]),e._v(" "),o("p",[e._v("这里会有几个阶段")]),e._v(" "),o("ol",[o("li",[e._v("第一阶段是创建文件")]),e._v(" "),o("li",[e._v("第二阶段将“hi”写入文件")]),e._v(" "),o("li",[e._v("第三阶段将“\\n”换行符写入到文件")])]),e._v(" "),o("p",[e._v("如果你去看echo的代码实现，基本就是这3个阶段。")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/image%20%28606%29.png",alt:""}})]),e._v(" "),o("p",[e._v("上面就是echo的代码，它先检查参数，并将参数写入到文件描述符1，在最后写入一个换行符。")]),e._v(" "),o("p",[e._v("让我们一个阶段一个阶段的看echo的执行过程，并理解对于文件系统发生了什么。相比看代码，这里直接看磁盘的分布图更方便：")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://gblobscdn.gitbook.com/assets%2F-MHZoT2b_bcLghjAOPsJ%2F-MRhzbAZwhuzp63wWdRE%2F-MRielGcbrHOzPCrxHcO%2Fimage.png?alt=media&token=f685aafe-7c22-4965-9936-d811b090023d",alt:""}})]),e._v(" "),o("p",[e._v("你们觉得的write 33代表了什么？我们正在创建文件，所以我们期望文件系统干什么呢？")]),e._v(" "),o("blockquote",[o("p",[e._v("学生回答：这是在写inode。")])]),e._v(" "),o("p",[e._v("是的，看起来给我们分配的inode位于block 33。之所以有两个write 33，第一个是为了标记inode将要被使用。在XV6中，我记得是使用inode中的type字段来标识inode是否空闲，这个字段同时也会用来表示inode是一个文件还是一个目录。所以这里将inode的type从空闲改成了文件，并写入磁盘表示这个inode已经被使用了。第二个write 33就是实际的写入inode的内容。inode的内容会包含linkcount为1以及其他内容。")]),e._v(" "),o("p",[e._v("write 46是向第一个data block写数据，那么这个data block属于谁呢？")]),e._v(" "),o("blockquote",[o("p",[e._v("学生回答：属于根目录。")])]),e._v(" "),o("p",[e._v("是的，block 46是根目录的第一个block。为什么它需要被写入数据呢？")]),e._v(" "),o("blockquote",[o("p",[e._v("学生回答：因为我们正在向根目录创建一个新文件。")])]),e._v(" "),o("p",[e._v("是的，这里我们向根目录增加了一个新的entry，其中包含了文件名x，以及我们刚刚分配的inode编号。")]),e._v(" "),o("p",[e._v("接下来的write 32又是什么意思呢？block 32保存的仍然是inode，那么inode中的什么发生了变化使得需要将更新后的inode写入磁盘？是的，根目录的大小变了，因为我们刚刚添加了16个字节的entry来代表文件x的信息。")]),e._v(" "),o("p",[e._v("最后又有一次write 33，我在稍后会介绍这次写入的内容，这里我们再次更新了文件x的inode， 尽管我们又还没有写入任何数据。")]),e._v(" "),o("p",[e._v("以上就是第一阶段创建文件的过程。第二阶段是向文件写入“hi”。")]),e._v(" "),o("p",[e._v("首先是write 45，这是更新bitmap。文件系统首先会扫描bitmap来找到一个还没有使用的data block，未被使用的data block对应bit 0。找到之后，文件系统需要将该bit设置为1，表示对应的data block已经被使用了。所以更新block 45是为了更新bitmap。")]),e._v(" "),o("p",[e._v("接下来的两次write 595表明，文件系统挑选了data block 595。所以在文件x的inode中，第一个direct block number是595。因为写入了两个字符，所以write 595被调用了两次。")]),e._v(" "),o("p",[e._v("第二阶段最后的write 33是更新文件x对应的inode中的size字段，因为现在文件x中有了两个字符。")]),e._v(" "),o("blockquote",[o("p",[e._v("学生提问：block 595看起来在磁盘中很靠后了，是因为前面的block已经被系统内核占用了吗？")]),e._v(" "),o("p",[e._v("Frans教授：我们可以看前面makefs指令，makefs存了很多文件在磁盘镜像中，这些都发生在创建文件x之前，所以磁盘中很大一部分已经被这些文件填满了。")]),e._v(" "),o("p",[e._v("学生提问：第二阶段最后的write 33是否会将block 595与文件x的inode关联起来？")]),e._v(" "),o("p",[e._v("Frans教授：会的。这里的write 33会发生几件事情：首先inode的size字段会更新；第一个direct block number会更新。这两个信息都会通过write 33一次更新到磁盘上的inode中。")])]),e._v(" "),o("p",[e._v("以上就是磁盘中文件系统的组织结构的核心，希望你们都能理解背后的原理。")])])}),[],!1,null,null,null);t.default=v.exports}}]);