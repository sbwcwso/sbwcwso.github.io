(window.webpackJsonp=window.webpackJsonp||[]).push([[469],{831:function(_,v,a){"use strict";a.r(v);var t=a(12),l=function(_){_.options.__data__block__={markmap_1a962850:"- [了解x86-32硬件](#了解x86-32硬件)\n  - [运行模式](#运行模式)\n    - [实模式](#实模式)\n    - [保护模式](#保护模式)\n  - [内存架构](#内存架构)\n    - [物理内存地址](#物理内存地址)\n    - [线性地址空间](#线性地址空间)\n    - [逻辑地址空间](#逻辑地址空间)\n    - [地址空间的转换](#地址空间的转换)\n  - [寄存器](#寄存器)\n    - [通用寄存器](#通用寄存器)\n    - [段寄存器](#段寄存器)\n    - [EIP：指令寄存器](#eip指令寄存器)\n    - [EFLAGS：标志寄存器](#eflags标志寄存器)"}},s=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"了解x86-32硬件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解x86-32硬件"}},[_._v("#")]),_._v(" 了解x86-32硬件")]),_._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[_._v("课件")]),_._v(" "),a("iframe",{attrs:{src:_.$withBase("/pdf/操作系统/lec2-lab0_642809998.pdf"),width:"100%",height:"600"}})]),_._v(" "),a("Markmap",{attrs:{id:"markmap_1a962850",code:_.$dataBlock.markmap_1a962850}}),a("h2",{attrs:{id:"运行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行模式"}},[_._v("#")]),_._v(" 运行模式")]),_._v(" "),a("ul",[a("li",[_._v("80386有四种运行模式：\n"),a("ul",[a("li",[_._v("实模式、保护模式、SMM模式和虚拟8086模式")])])])]),_._v(" "),a("h3",{attrs:{id:"实模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实模式"}},[_._v("#")]),_._v(" 实模式")]),_._v(" "),a("ul",[a("li",[_._v("80386加电启动后处于实模式运行状态")]),_._v(" "),a("li",[_._v("在这种状态下软件可访问的物理内存空间不能超过1MB\n"),a("ul",[a("li",[_._v("16 位寻址，寻址空间 64 Kb")])])]),_._v(" "),a("li",[_._v("无法发挥Intel80386以上级别的32位CPU的4GB内存管理能力")])]),_._v(" "),a("h3",{attrs:{id:"保护模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保护模式"}},[_._v("#")]),_._v(" 保护模式")]),_._v(" "),a("ul",[a("li",[_._v("支持内存分页机制，提供了对虚拟内存的良好支持")]),_._v(" "),a("li",[_._v("保护模式下80386支持多任务，还支持优先级机制，不同的程序可以运行在不同的优先级上\n"),a("ul",[a("li",[_._v("优先级一共分0～3 4个级别，操作系统运行在最高的优先级0上，应用程序则运行在比较低的级别上")])])]),_._v(" "),a("li",[_._v("配合良好的检查机制后，既可以在任务间实现数据的安全共享也可以很好地隔离各个任务")])]),_._v(" "),a("h2",{attrs:{id:"内存架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存架构"}},[_._v("#")]),_._v(" 内存架构")]),_._v(" "),a("ul",[a("li",[_._v("地址是访问内存空间的索引")]),_._v(" "),a("li",[_._v("80386是32位的处理器，即可以寻址的物理内存地址空间为 2^32=4G 字节")])]),_._v(" "),a("h3",{attrs:{id:"物理内存地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理内存地址"}},[_._v("#")]),_._v(" 物理内存地址")]),_._v(" "),a("ul",[a("li",[_._v("物理内存地址空间是处理器提交到总线上用于访问计算机系统中的内存和外设的最终地址\n"),a("ul",[a("li",[_._v("一个计算机系统中只有一个物理地址空间。")])])])]),_._v(" "),a("h3",{attrs:{id:"线性地址空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性地址空间"}},[_._v("#")]),_._v(" 线性地址空间")]),_._v(" "),a("ul",[a("li",[_._v("线性地址空间是在操作系统的虚存管理之下每个运行的应用程序能访问的地址空间\n"),a("ul",[a("li",[_._v("每个运行的应用程序都认为自己独享整个计算机系统的地址空间，这样可让多个运行的应用程序之间相互隔离")])])])]),_._v(" "),a("h3",{attrs:{id:"逻辑地址空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑地址空间"}},[_._v("#")]),_._v(" 逻辑地址空间")]),_._v(" "),a("ul",[a("li",[_._v("逻辑地址空间是应用程序直接使用的地址空间")])]),_._v(" "),a("h3",{attrs:{id:"地址空间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#地址空间的转换"}},[_._v("#")]),_._v(" 地址空间的转换")]),_._v(" "),a("ul",[a("li",[_._v("段机制启动、页机制未启动\n"),a("ul",[a("li",[_._v("逻辑地址->"),a("strong",[_._v("段机制处理-")]),_._v(">线性地址=物理地址")])])]),_._v(" "),a("li",[_._v("段机制和页机制都启动\n"),a("ul",[a("li",[_._v("逻辑地址->"),a("strong",[_._v("段机制处理")]),_._v("->线性地址->"),a("strong",[_._v("页机制处理")]),_._v("->物理地址")])])])]),_._v(" "),a("h2",{attrs:{id:"寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄存器"}},[_._v("#")]),_._v(" 寄存器")]),_._v(" "),a("ul",[a("li",[_._v("80386的寄存器可以分为8组\n"),a("ul",[a("li",[_._v("通用寄存器")]),_._v(" "),a("li",[_._v("段寄存器")]),_._v(" "),a("li",[_._v("指令指针寄存器")]),_._v(" "),a("li",[_._v("标志寄存器")]),_._v(" "),a("li",[_._v("控制寄存器")]),_._v(" "),a("li",[_._v("系统地址寄存器")]),_._v(" "),a("li",[_._v("调试寄存器")]),_._v(" "),a("li",[_._v("测试寄存器")])])])]),_._v(" "),a("h3",{attrs:{id:"通用寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用寄存器"}},[_._v("#")]),_._v(" 通用寄存器")]),_._v(" "),a("ul",[a("li",[_._v("EAX：累加器")]),_._v(" "),a("li",[_._v("EBX：基址寄存器")]),_._v(" "),a("li",[_._v("ECX：计数器")]),_._v(" "),a("li",[_._v("EDX：数据寄存器")]),_._v(" "),a("li",[_._v("ESI：源地址指针寄存器")]),_._v(" "),a("li",[_._v("EDI：目的地址指针寄存器")]),_._v(" "),a("li",[_._v("EBP：基址指针寄存器")]),_._v(" "),a("li",[_._v("ESP：堆栈指针寄存器")])]),_._v(" "),a("h3",{attrs:{id:"段寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#段寄存器"}},[_._v("#")]),_._v(" 段寄存器")]),_._v(" "),a("ul",[a("li",[_._v("CS：代码段(Code Segment)")]),_._v(" "),a("li",[_._v("DS：数据段(Data Segment)")]),_._v(" "),a("li",[_._v("ES：附加数据段(Extra Segment)")]),_._v(" "),a("li",[_._v("SS：堆栈段(Stack Segment)")]),_._v(" "),a("li",[_._v("FS：附加段")]),_._v(" "),a("li",[_._v("GS：附加段")])]),_._v(" "),a("h3",{attrs:{id:"eip：指令寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eip：指令寄存器"}},[_._v("#")]),_._v(" EIP：指令寄存器")]),_._v(" "),a("ul",[a("li",[_._v("EIP的低16位就是8086的IP，它存储的是下一条要执行指令的内存地址，在分段地址转换中，表示指令的段内偏移地址")])]),_._v(" "),a("h3",{attrs:{id:"eflags：标志寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eflags：标志寄存器"}},[_._v("#")]),_._v(" EFLAGS：标志寄存器")]),_._v(" "),a("ul",[a("li",[_._v("IF(Interrupt Flag)：中断允许标志位\n"),a("ul",[a("li",[_._v("由CLI，STI两条指令来控制")]),_._v(" "),a("li",[_._v("设置 IF 使CPU可识别外部（可屏蔽）中断请求。复位 IF则禁止中断")]),_._v(" "),a("li",[_._v("IF 对不可屏蔽外部中断和故障中断的识别没有任何作用\n"),a("ul",[a("li",[_._v("CF, PF, ZF, ...")])])])])])])],1)}),[],!1,null,null,null);"function"==typeof l&&l(s);v.default=s.exports}}]);