(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{810:function(t,s,a){"use strict";a.r(s);var e=a(12),c=function(t){t.options.__data__block__={markmap_1a96284d:"- [Socket 编程](#socket-编程)\n  - [应用编程接口(API)](#应用编程接口api)\n    - [网络程设计接口](#网络程设计接口)\n    - [应用编程接口 API](#应用编程接口-api)\n    - [几种典型的应用编程接口](#几种典型的应用编程接口)\n  - [Socket API 概述](#socket-api-概述)\n    - [Socket 抽象](#socket-抽象)\n    - [地址结构](#地址结构)\n  - [Socket API 函数(WinSock)](#socket-api-函数winsock)\n    - [常用的 Socket API 函数](#常用的-socket-api-函数)\n      - [`WSAStartup`](#wsastartup)\n      - [`WSACleanup`](#wsacleanup)\n      - [`socket`](#socket)\n      - [`closesocket`](#closesocket)\n      - [`bind`](#bind)\n      - [`listen`](#listen)\n      - [`connect`](#connect)\n      - [`accept`](#accept)\n      - [`send`, `sendto`](#send-sendto)\n      - [recv, recvfrom](#recv-recvfrom)\n      - [setsockopt, getsockopt](#setsockopt-getsockopt)\n      - [小结 🌟](#小结-)\n    - [网络字节顺序](#网络字节顺序)\n    - [网络应用的Socket API(TCP)调用基本流程](#网络应用的socket-apitcp调用基本流程)\n  - [客户端软件设计](#客户端软件设计)\n    - [解析服务器 IP 地址](#解析服务器-ip-地址)\n    - [解析服务器(熟知端口号)](#解析服务器熟知端口号)\n    - [解析协议号](#解析协议号)\n    - [客户端软件的实现](#客户端软件的实现)\n      - [TCP 客户端软件流程](#tcp-客户端软件流程)\n      - [UDP 客户端软件流程](#udp-客户端软件流程)\n      - [相关函数](#相关函数)\n        - [`connectsock()`](#connectsock)\n        - [`connectUDP()`](#connectudp)\n        - [`connectTCP`](#connecttcp)\n        - [异常处理](#异常处理)\n    - [客户端软件实例](#客户端软件实例)\n      - [访问 DAYTIME 服务的客户端 (TCP)](#访问-daytime-服务的客户端-tcp)\n      - [访问 DAYTIME 服务的客户端 (UDP)](#访问-daytime-服务的客户端-udp)\n  - [服务器软件设计](#服务器软件设计)\n    - [4 种基本类型服务器](#4-种基本类型服务器)\n      - [循环无连接服务器(Iterative connectionless)](#循环无连接服务器iterative-connectionless)\n      - [循环面向连接服务器(Iterative connection-oriented)](#循环面向连接服务器iterative-connection-oriented)\n      - [并发无连接服务器(Concurrent connectionless)](#并发无连接服务器concurrent-connectionless)\n      - [并发面向连接服务器(Concurrent connection-oriented)](#并发面向连接服务器concurrent-connection-oriented)\n    - [服务器的实现](#服务器的实现)\n      - [`passivesock()`](#passivesock)\n      - [`passiveUDP()`](#passiveudp)\n      - [`passiveTCP()`](#passivetcp)\n    - [服务端软件实例](#服务端软件实例)\n      - [例: 无连接循环 `DAYTIME` 服务器](#例-无连接循环-daytime-服务器)\n      - [例: 面向连接并发 `DAYTIME` 服务器](#例-面向连接并发-daytime-服务器)"}},n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"socket-编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-编程"}},[t._v("#")]),t._v(" Socket 编程")]),t._v(" "),a("Markmap",{attrs:{id:"markmap_1a96284d",code:t.$dataBlock.markmap_1a96284d}}),a("h2",{attrs:{id:"应用编程接口api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用编程接口api"}},[t._v("#")]),t._v(" 应用编程接口(API)")]),t._v(" "),a("h3",{attrs:{id:"网络程设计接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络程设计接口"}},[t._v("#")]),t._v(" 网络程设计接口")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825093613-2021-08-25-09-36-14.png",alt:"20210825093613-2021-08-25-09-36-14"}})]),t._v(" "),a("ul",[a("li",[t._v("Socket 编程针对传输层")])]),t._v(" "),a("h3",{attrs:{id:"应用编程接口-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用编程接口-api"}},[t._v("#")]),t._v(" 应用编程接口 API")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("应用编程接口 API (Application Programming Interface)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825094258-2021-08-25-09-42-58.png",alt:"20210825094258-2021-08-25-09-42-58"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("应用进程的控制权")]),t._v("和"),a("strong",[t._v("操作系统的控制权")]),t._v("进行转换的一个系统调用接口")])])]),t._v(" "),a("h3",{attrs:{id:"几种典型的应用编程接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种典型的应用编程接口"}},[t._v("#")]),t._v(" 几种典型的应用编程接口")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("典型的应用编程接口")]),t._v(" "),a("ul",[a("li",[t._v("Berkeley UNIX 操作系统定义了一种 API，称为套接字接口(socket interface)，简称"),a("strong",[t._v("套接字")]),t._v(" (socket)\n"),a("ul",[a("li",[t._v("应用最广")])])]),t._v(" "),a("li",[t._v("微软公司在其操作系统中采用了套接字接口 API，形成了一个稍有不同的 API，并称之为 Windows Socket Interface，"),a("strong",[t._v("WINSOCK")])]),t._v(" "),a("li",[t._v("AT&T 为其 UNIX 系统 V 定义了一种 API，简写为 TLI (Transport Layer Interface)")])])]),t._v(" "),a("h2",{attrs:{id:"socket-api-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-api-概述"}},[t._v("#")]),t._v(" Socket API 概述")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("最初设计")]),t._v(" "),a("ul",[a("li",[t._v("面向BSD UNIX-Berkley")]),t._v(" "),a("li",[t._v("面向TCP/IP协议栈接口")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("目前情况")]),t._v(" "),a("ul",[a("li",[t._v("事实上的工业标准")]),t._v(" "),a("li",[t._v("绝大多数操作系统都支持")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Internet网络应用最典型的API接口")])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("通信模型")]),t._v(" "),a("ul",[a("li",[t._v("客户/服务器（C/S）")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("应用进程间通信的抽象机制")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825095224-2021-08-25-09-52-24.png",alt:"20210825095224-2021-08-25-09-52-24"}})])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("标识通信端点（对外）")]),t._v(" "),a("ul",[a("li",[t._v("IP地址+端口号")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825095320-2021-08-25-09-53-20.png",alt:"20210825095320-2021-08-25-09-53-20"}})])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("操作系统/进程如何管理套接字（对内）？")]),t._v(" "),a("ul",[a("li",[t._v("套接字描述符（socket descriptor）\n"),a("ul",[a("li",[t._v("小整数")])])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("套接字对内，对外管理机制是不同的")])]),t._v(" "),a("h3",{attrs:{id:"socket-抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-抽象"}},[t._v("#")]),t._v(" Socket 抽象")]),t._v(" "),a("ul",[a("li",[t._v("类似于文件的抽象")]),t._v(" "),a("li",[t._v("当应用进程创建套接字时，操作系统分配一个数据结构存储该套接字相关信息")]),t._v(" "),a("li",[t._v("返回套接字描述符\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825100049-2021-08-25-10-00-49.png",alt:"20210825100049-2021-08-25-10-00-49"}})])]),t._v(" "),a("h3",{attrs:{id:"地址结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#地址结构"}},[t._v("#")]),t._v(" 地址结构")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("已定义结构 sockaddr_in 来表示地址结构")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nu_char sin_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 地址长度 */")]),t._v("\nu_char sin_family"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 地址族(TCP/IP：AF_INET) */")]),t._v("\nu_short sin_port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 端口号 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr")]),t._v(" sin_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IP地址 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" sin_zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 未用(置0) */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("使用TCP/IP协议簇的网络应用程序声明端点地址变量时，使用结构 "),a("code",[t._v("sockaddr_in")])])])]),t._v(" "),a("h2",{attrs:{id:"socket-api-函数winsock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-api-函数winsock"}},[t._v("#")]),t._v(" Socket API 函数(WinSock)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825100822-2021-08-25-10-08-22.png",alt:"20210825100822-2021-08-25-10-08-22"}})]),t._v(" "),a("h3",{attrs:{id:"常用的-socket-api-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的-socket-api-函数"}},[t._v("#")]),t._v(" 常用的 Socket API 函数")]),t._v(" "),a("h4",{attrs:{id:"wsastartup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wsastartup"}},[t._v("#")]),t._v(" "),a("code",[t._v("WSAStartup")])]),t._v(" "),a("h4",{attrs:{id:"wsacleanup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wsacleanup"}},[t._v("#")]),t._v(" "),a("code",[t._v("WSACleanup")])]),t._v(" "),a("p",[a("code",[t._v("int WSACleanup (void)")])]),t._v(" "),a("ul",[a("li",[t._v("应用程序在完成对请求的Socket库的使用，最后要调用WSACleanup函数")]),t._v(" "),a("li",[t._v("解除与Socket库的绑定")]),t._v(" "),a("li",[t._v("释放Socket库所占用的系统资源")])]),t._v(" "),a("h4",{attrs:{id:"socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" "),a("code",[t._v("socket")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建套接字")])]),t._v(" "),a("li",[a("p",[t._v("操作系统返回套接字描述符（sd）")])]),t._v(" "),a("li",[a("p",[t._v("第一个参数(协议族)")]),t._v(" "),a("ul",[a("li",[t._v("protofamily = PF_INET（TCP/IP）")])])]),t._v(" "),a("li",[a("p",[t._v("第二个参数(套接字类型):")]),t._v(" "),a("ul",[a("li",[t._v("type = SOCK_STREAM,SOCK_DGRAM or SOCK_RAW（TCP/IP）")])])]),t._v(" "),a("li",[a("p",[t._v("第三个参数(协议号):0为默认")])]),t._v(" "),a("li",[a("p",[t._v("例：创建一个流套接字的代码段")])])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("protoent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getprotobyname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSOCKET sd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("SOCK_STREAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("p_proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Socket面向TCP/IP的服务类型")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210825101455-2021-08-25-10-14-55.png",alt:"20210825101455-2021-08-25-10-14-55"}})]),t._v(" "),a("ul",[a("li",[a("code",[t._v("TCP")]),t._v(" "),a("ul",[a("li",[t._v("可靠、面向连接、字节流传输、点对点、全双工")])])]),t._v(" "),a("li",[a("code",[t._v("UDP")]),t._v(" "),a("ul",[a("li",[t._v("不可靠、无连接、数据报传输")])])]),t._v(" "),a("li",[t._v("原始套接字")])])]),t._v(" "),a("h4",{attrs:{id:"closesocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closesocket"}},[t._v("#")]),t._v(" "),a("code",[t._v("closesocket")])]),t._v(" "),a("p",[a("code",[t._v("int closesocket(SOCKET sd)")])]),t._v(" "),a("ul",[a("li",[t._v("关闭一个描述符为 "),a("code",[t._v("sd")]),t._v(" 的套接字")]),t._v(" "),a("li",[t._v("如果多个进程共享一个套接字，调用 "),a("code",[t._v("closesocket")]),t._v(" "),a("ul",[a("li",[t._v("将套接字引用计数减1，减至0才关闭")])])]),t._v(" "),a("li",[t._v("一个进程中的多线程对一个套接字的使用无计数\n"),a("ul",[a("li",[t._v("如果进程中的一个线程调用 "),a("code",[t._v("closesocket")]),t._v(" 将一个套接字关闭，该进程中的其他线程也将不能访问该套接字")])])]),t._v(" "),a("li",[t._v("返回值：\n"),a("ul",[a("li",[t._v("0：成功")]),t._v(" "),a("li",[t._v("SOCKET_ERROR：失败")])])])]),t._v(" "),a("h4",{attrs:{id:"bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" "),a("code",[t._v("bind")])]),t._v(" "),a("p",[a("code",[t._v("int bind(sd,localaddr,addrlen)")])]),t._v(" "),a("ul",[a("li",[t._v("绑定套接字的本地端点地址\n"),a("ul",[a("li",[t._v("IP地址+端口号")])])]),t._v(" "),a("li",[t._v("参数:\n"),a("ul",[a("li",[t._v("套接字描述符（"),a("code",[t._v("sd")]),t._v("）")]),t._v(" "),a("li",[t._v("端点地址（"),a("code",[t._v("localaddr")]),t._v("）\n"),a("ul",[a("li",[t._v("结构 "),a("code",[t._v("sockaddr_in")])])])])])]),t._v(" "),a("li",[t._v("客户程序一般不必调用 "),a("code",[t._v("bind")]),t._v(" 函数")]),t._v(" "),a("li",[t._v("服务器端需要调用\n"),a("ul",[a("li",[t._v("熟知端口号\n"),a("ul",[a("li",[t._v("标准应用")])])]),t._v(" "),a("li",[t._v("IP地址\n"),a("ul",[a("li",[t._v("多个网络地址用地址通配符解决")])])])])])]),t._v(" "),a("h4",{attrs:{id:"listen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listen"}},[t._v("#")]),t._v(" "),a("code",[t._v("listen")])]),t._v(" "),a("p",[a("code",[t._v("int listen(sd,queuesize);")])]),t._v(" "),a("ul",[a("li",[t._v("置服务器端的流套接字处于监听状态\n"),a("ul",[a("li",[t._v("仅服务器端调用")]),t._v(" "),a("li",[t._v("仅用于面向连接的流套接字")])])]),t._v(" "),a("li",[t._v("设置连接请求队列大小（queuesize）")]),t._v(" "),a("li",[t._v("返回值：\n"),a("ul",[a("li",[t._v("0:成功")]),t._v(" "),a("li",[t._v("SOCKET_ERROR：失败")])])])]),t._v(" "),a("h4",{attrs:{id:"connect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" "),a("code",[t._v("connect")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("connect(sd,saddr,saddrlen)")]),t._v(";")])]),t._v(" "),a("li",[a("p",[t._v("客户程序调用 "),a("code",[t._v("connect")]),t._v(" 函数来使客户套接字（ "),a("code",[t._v("sd")]),t._v(" ）与特定计算机的特定端口（ "),a("code",[t._v("saddr")]),t._v(" ）的套接字（服务）进行连接")])]),t._v(" "),a("li",[a("p",[t._v("仅用于客户端")])]),t._v(" "),a("li",[a("p",[t._v("可用于TCP客户端也可以用于 UDP客户端")]),t._v(" "),a("ul",[a("li",[t._v("TCP客户端：建立TCP连接")]),t._v(" "),a("li",[t._v("UDP客户端：只是指定服务器端点地址\n"),a("ul",[a("li",[t._v("绝对不可能发生连接")])])])])])]),t._v(" "),a("h4",{attrs:{id:"accept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accept"}},[t._v("#")]),t._v(" "),a("code",[t._v("accept")])]),t._v(" "),a("p",[a("code",[t._v("newsock = accept(sd,caddr,caddrlen);")])]),t._v(" "),a("ul",[a("li",[t._v("服务程序调用 "),a("code",[t._v("accept")]),t._v(" 函数从处于监听状态的流套接字 "),a("code",[t._v("sd")]),t._v(" 的客户连接请求队列中取出排在最前的一个客户请求，并且创建一个新的套接字来与客户套接字创建连接通道\n"),a("ul",[a("li",[t._v("仅用于TCP套接字")]),t._v(" "),a("li",[t._v("仅用于服务器")])])]),t._v(" "),a("li",[t._v("队列可以实现并发 TCP 通信")]),t._v(" "),a("li",[t._v("利用新创建的套接字（newsock）与客户通信")])]),t._v(" "),a("h4",{attrs:{id:"send-sendto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-sendto"}},[t._v("#")]),t._v(" "),a("code",[t._v("send")]),t._v(", "),a("code",[t._v("sendto")])]),t._v(" "),a("p",[a("code",[t._v("send(sd,*buf,len,flags);")]),t._v(" "),a("code",[t._v("sendto(sd,*buf,len,flags,destaddr,addrlen);")])]),t._v(" "),a("p",[t._v("send函数TCP套接字（客户与服务器）或调用了\nconnect函数的UDP客户端套接字\nsendto函数用于UDP服务器端套接字与未调用\nconnect函数的UDP客户端套接字")]),t._v(" "),a("h4",{attrs:{id:"recv-recvfrom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recv-recvfrom"}},[t._v("#")]),t._v(" recv, recvfrom")]),t._v(" "),a("p",[t._v("recv(sd,*buffer,len,flags);\nrecvfrom(sd,*buf,len,flags,senderaddr,saddrlen);")]),t._v(" "),a("p",[t._v("recv函数从TCP连接的另一端接收数据，或者从\n调用了connect函数的UDP客户端套接字接收服务\n器发来的数据\nrecvfrom函数用于从UDP服务器端套接字与未调\n用connect函数的UDP客户端套接字接收对端数据")]),t._v(" "),a("h4",{attrs:{id:"setsockopt-getsockopt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setsockopt-getsockopt"}},[t._v("#")]),t._v(" setsockopt, getsockopt")]),t._v(" "),a("p",[t._v("int setsockopt(int sd, int level, int optname, *optval, int optlen);\nint getsockopt(int sd, int level, int optname, *optval, socklen_t *optlen);\nsetsockopt()函数用来设置套接字sd的选项参数\ngetsockopt()函数用于获取任意类型、任意状态套\n接口的选项当前值，并把结果存入optval")]),t._v(" "),a("h4",{attrs:{id:"小结-"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-"}},[t._v("#")]),t._v(" 小结 🌟")]),t._v(" "),a("p",[t._v("WSAStartup: 初始化socket库(仅对WinSock)\n WSACleanup: 清楚/终止socket库的使用 (仅对WinSock)\n socket: 创建套接字\n connect:“连接”远端服务器 (仅用于客户端)\n closesocket: 释放/关闭套接字\n bind: 绑定套接字的本地IP地址和端口号（通常客户端不\n需要）\n listen: 置服务器端TCP套接字为监听模式，并设置队列\n大小 (仅用于服务器端TCP套接字)\n accept: 接受/提取一个连接请求，创建新套接字，通过新\n套接 (仅用于服务器端的TCP套接字)\n recv: 接收数据（用于TCP套接字或连接模式的客户端\nUDP套接字）\nrecvfrom: 接收数据报（用于非连接模式的UDP套接字）\n send: 发送数据（用于TCP套接字或连接模式的客户端\nUDP套接字）\n sendto:发送数据报（用于非连接模式的UDP套接字）\n setsockopt: 设置套接字选项参数\n getsockopt: 获取套接字选项参数")]),t._v(" "),a("h3",{attrs:{id:"网络字节顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络字节顺序"}},[t._v("#")]),t._v(" 网络字节顺序")]),t._v(" "),a("p",[t._v("TCP/IP定义了标准的用于协议头中的二进制整\n数表示：网络字节顺序（network byte order）\n某些Socket API函数的参数需要存储为网络字\n节顺序（如IP地址、端口号等）\n可以实现本地字节顺序与网络字节顺序间转换\n的函数\n htons : 本地字节顺序→网络字节顺序(16bits)\n ntohs : 网络字节顺序→本地字节顺序(16bits)\n htonl : 本地字节顺序→网络字节顺序(32bits)\n ntohl : 网络字节顺序→本地字节顺序(32bits)")]),t._v(" "),a("h3",{attrs:{id:"网络应用的socket-apitcp调用基本流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络应用的socket-apitcp调用基本流程"}},[t._v("#")]),t._v(" 网络应用的Socket API(TCP)调用基本流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210826201555-2021-08-26-20-15-55.png",alt:"20210826201555-2021-08-26-20-15-55"}})]),t._v(" "),a("h2",{attrs:{id:"客户端软件设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端软件设计"}},[t._v("#")]),t._v(" 客户端软件设计")]),t._v(" "),a("h3",{attrs:{id:"解析服务器-ip-地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析服务器-ip-地址"}},[t._v("#")]),t._v(" 解析服务器 IP 地址")]),t._v(" "),a("h3",{attrs:{id:"解析服务器熟知端口号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析服务器熟知端口号"}},[t._v("#")]),t._v(" 解析服务器(熟知端口号)")]),t._v(" "),a("h3",{attrs:{id:"解析协议号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析协议号"}},[t._v("#")]),t._v(" 解析协议号")]),t._v(" "),a("h3",{attrs:{id:"客户端软件的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端软件的实现"}},[t._v("#")]),t._v(" 客户端软件的实现")]),t._v(" "),a("h4",{attrs:{id:"tcp-客户端软件流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-客户端软件流程"}},[t._v("#")]),t._v(" TCP 客户端软件流程")]),t._v(" "),a("h4",{attrs:{id:"udp-客户端软件流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udp-客户端软件流程"}},[t._v("#")]),t._v(" UDP 客户端软件流程")]),t._v(" "),a("h4",{attrs:{id:"相关函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关函数"}},[t._v("#")]),t._v(" 相关函数")]),t._v(" "),a("h5",{attrs:{id:"connectsock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectsock"}},[t._v("#")]),t._v(" "),a("code",[t._v("connectsock()")])]),t._v(" "),a("h5",{attrs:{id:"connectudp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectudp"}},[t._v("#")]),t._v(" "),a("code",[t._v("connectUDP()")])]),t._v(" "),a("h5",{attrs:{id:"connecttcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connecttcp"}},[t._v("#")]),t._v(" "),a("code",[t._v("connectTCP")])]),t._v(" "),a("h5",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("h3",{attrs:{id:"客户端软件实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端软件实例"}},[t._v("#")]),t._v(" 客户端软件实例")]),t._v(" "),a("h4",{attrs:{id:"访问-daytime-服务的客户端-tcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问-daytime-服务的客户端-tcp"}},[t._v("#")]),t._v(" 访问 DAYTIME 服务的客户端 (TCP)")]),t._v(" "),a("h4",{attrs:{id:"访问-daytime-服务的客户端-udp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问-daytime-服务的客户端-udp"}},[t._v("#")]),t._v(" 访问 DAYTIME 服务的客户端 (UDP)")]),t._v(" "),a("h2",{attrs:{id:"服务器软件设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器软件设计"}},[t._v("#")]),t._v(" 服务器软件设计")]),t._v(" "),a("h3",{attrs:{id:"4-种基本类型服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#4-种基本类型服务器"}},[t._v("#")]),t._v(" 4 种基本类型服务器")]),t._v(" "),a("h4",{attrs:{id:"循环无连接服务器iterative-connectionless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环无连接服务器iterative-connectionless"}},[t._v("#")]),t._v(" 循环无连接服务器(Iterative connectionless)")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("基本流程")]),t._v(" "),a("ul",[a("li",[t._v("创建套接字")]),t._v(" "),a("li",[t._v("绑定端点地址（INADDR_ANY+端口号）")]),t._v(" "),a("li",[t._v("反复接收来自客户端的请求")]),t._v(" "),a("li",[t._v("遵循应用层协议，构造响应报文，发送给客户")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("数据发送")]),t._v(" "),a("ul",[a("li",[t._v("服务器端不能使用connect()函数")]),t._v(" "),a("li",[t._v("无连接服务器使用sendto()函数发送数据报")])])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("获取客户端点地址")])]),t._v(" "),a("h4",{attrs:{id:"循环面向连接服务器iterative-connection-oriented"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环面向连接服务器iterative-connection-oriented"}},[t._v("#")]),t._v(" 循环面向连接服务器(Iterative connection-oriented)")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("基本流程")]),t._v(" "),a("ol",[a("li",[t._v("创建（主）套接字，并绑定熟知端口号")]),t._v(" "),a("li",[t._v("设置（主）套接字为被动监听模式，准备用于服务器")]),t._v(" "),a("li",[t._v("调用accept()函数接收下一个连接请求（通过主套接字），创建新套接字用于与该客户建立连接")]),t._v(" "),a("li",[t._v("遵循应用层协议，反复接收客户请求，构造并发送响应(通过新套接字)")]),t._v(" "),a("li",[t._v("完成为特定客户服务后，关闭与该客户之间的连接，返回步骤3")])])]),t._v(" "),a("h4",{attrs:{id:"并发无连接服务器concurrent-connectionless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发无连接服务器concurrent-connectionless"}},[t._v("#")]),t._v(" 并发无连接服务器(Concurrent connectionless)")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("基本流程")]),t._v(" "),a("p",[t._v("主线程1: 创建套接字，并绑定熟知端口号\n主线程2: 反复调用 "),a("code",[t._v("recvfrom()")]),t._v(" 函数，接收下一个客户请求，并创建新线程处理该客户响应")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("子线程1: 接收一个特定请求\n子线程2: 依据应用层协议构造响应报文，并调用 "),a("code",[t._v("sendto()")]),t._v(" 发送\n子线程3: 退出(一个子线程处理一个请求后即终止)")])]),t._v(" "),a("h4",{attrs:{id:"并发面向连接服务器concurrent-connection-oriented"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发面向连接服务器concurrent-connection-oriented"}},[t._v("#")]),t._v(" 并发面向连接服务器(Concurrent connection-oriented)")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("基本流程")]),t._v(" "),a("ul",[a("li",[t._v("主线程1: 创建（主）套接字，并绑定熟知端口号；")]),t._v(" "),a("li",[t._v("主线程2: 设置（主）套接字为被动监听模式，准备用于服务器；")]),t._v(" "),a("li",[t._v("主线程3: 反复调用accept()函数接收下一个"),a("strong",[t._v("连接请求")]),t._v("（通过主套接字），并创建一个新的子线程处理该客户响应；")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("子线程1: 接收一个客户的"),a("strong",[t._v("服务请求")]),t._v("（通过新创建的套接字）；")]),t._v(" "),a("li",[t._v("子线程2: 遵循应用层协议与特定客户进行交互；")]),t._v(" "),a("li",[t._v("子线程3: 关闭/释放连接并退出（线程终止）")])])]),t._v(" "),a("h3",{attrs:{id:"服务器的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器的实现"}},[t._v("#")]),t._v(" 服务器的实现")]),t._v(" "),a("p",[t._v("设计一个底层过程隐藏底层代码：\n passivesock()\n两个高层过程分别用于创建服务器端UDP套接字\n和TCP套接字（调用passivesock()函数）:\n passiveUDP()\n passiveTCP()")]),t._v(" "),a("h4",{attrs:{id:"passivesock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#passivesock"}},[t._v("#")]),t._v(" "),a("code",[t._v("passivesock()")])]),t._v(" "),a("h4",{attrs:{id:"passiveudp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#passiveudp"}},[t._v("#")]),t._v(" "),a("code",[t._v("passiveUDP()")])]),t._v(" "),a("h4",{attrs:{id:"passivetcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#passivetcp"}},[t._v("#")]),t._v(" "),a("code",[t._v("passiveTCP()")])]),t._v(" "),a("h3",{attrs:{id:"服务端软件实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端软件实例"}},[t._v("#")]),t._v(" 服务端软件实例")]),t._v(" "),a("h4",{attrs:{id:"例-无连接循环-daytime-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例-无连接循环-daytime-服务器"}},[t._v("#")]),t._v(" 例: 无连接循环 "),a("code",[t._v("DAYTIME")]),t._v(" 服务器")]),t._v(" "),a("h4",{attrs:{id:"例-面向连接并发-daytime-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例-面向连接并发-daytime-服务器"}},[t._v("#")]),t._v(" 例: 面向连接并发 "),a("code",[t._v("DAYTIME")]),t._v(" 服务器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/sbwcwso/PicBed@master/20210826211838-2021-08-26-21-18-38.png",alt:"20210826211838-2021-08-26-21-18-38"}})])],1)}),[],!1,null,null,null);"function"==typeof c&&c(n);s.default=n.exports}}]);